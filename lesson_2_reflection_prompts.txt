What happens when you initialize a repository? Why do you need to do it?
    When a GitHub repo is initilized, a directory called ".git" is created 
    wherever the command git init was used. You need to do this because all
    of the information about the repository will be stored here from now on.
    All of the commands that run over GitHub will be using the metadata that is 
    stored on this file.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    The git repository is already on the cloud, that means that all of your 
    project is being affected by the files that are here. The working directory
    is just stored locally, there is no connection at all to the internet. 
    The staging area contains the information that is going to be commited/ 
    the files that have been changed and that are being prepared to commit. This
    information is neither on the working directory nor on the repository 
    available and it is valuable becuase you can make sure that the files that 
    you are going to merge into the repo are the ones that you specifically 
    want.

How can you use the staging area to make sure you have one commit per logical
change?
    When you have your files on the staging area, that means that it is neither 
    commited on the project nor is the same to the local directory where you 
    have cloned your git repository. You can checkout the changes or the 
    differences between the local directory and the staging area to make sure 
    that you only have added the files that represent one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    Los branches en git te permiten tener diferentes "caminos" por los cuales
    el proyecto se esta desarrollando. Una razón por la que se quisiera hacer 
    esto para realizar un cambio drastico en cuanto al funcionamiento del 
    programa, en otras palabras un demo. En este caso se crea un branch paralela
    al master branch lo cual permite seguir teniendo un programa que funciona
    en caso de que quieras seguirlo usando o mostrarlo al mismo tiempo que estas 
    desarrollando tu demo en una nueva branch.

How do the diagrams help you visualize the branch structure?
    The diagrams help you visualize which branches are available in the 
    repository, which commits belong to each of the created branches and which
    commits are not reachable because they were made with deatached HEAD. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    El resultado es juntar dos caminos en un repositorio. Esto significa que los
    archivos que fueron modificados tendran las modificaciones de ambas 
    branches, aquellos que no se modificaron permanecen y los que se eliminaron
    aunque solo haya sido en una de las branches ya no estarán. Se representa 
    como un nuevo commit/nodo con dos padres porque queremos seguir teniendo 
    accesso a los commits de ambas ramas.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    The first advantage that you take with automatic merging is that you have 
    all the changes available at the same time on the same file. You are also 
    aware of which files are the ones that were modified simultaneously. This 
    will take you to pay special attention into this part of the project. The
    last reason is that manual merging is way more slow.
